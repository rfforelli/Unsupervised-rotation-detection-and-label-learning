-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi_rom is 
    generic(
             DWIDTH     : integer := 92; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101101111111101001000000001101000000010010000000100100111111111100000000000010000000010101", 
    1 => "11111010000000011101000000001010000000000010000000001011000000000001000000001011000000010000", 
    2 => "00010111111111111110000000001100000000000000111111001111000000111001111111110010000000011001", 
    3 => "00000000000000001001111111010101000000010001111111110110111111101010000000010001000000001001", 
    4 => "00000101000000011010111111111011000000001011000000001000111111111010000000001100000000001011", 
    5 => "00000101000000000000111111111010111110010001000000000100111111111101000000000000111111111100", 
    6 => "11111011000000000001111111110011000000000000000000011000111111010110111111101011000000001101", 
    7 => "11111001000000100101000000010001111111101001000000000010000000000110111111111101000000000111", 
    8 => "00010000000000010001111111111100000000001101000000010100000000000001000000001101111111111010", 
    9 => "11111100111111101010000000000110000000000110111111110010000000001101000000010001000000001101", 
    10 => "00000100111111010101000000001011000000000100000000000110111111111111000000000110111111110111", 
    11 => "11100110111111110100000000011100000000000110111111110000000000011010111111100111000000010001", 
    12 => "11111101111111101100111111011001000000001000000000000101111111110010111111111101000000000000", 
    13 => "00000001111111111010000000001010111111110001000000011010111111111101111111110111111111101000", 
    14 => "00010001000000000111111111111011111111110001111111111100111111110011000000000111111111110111", 
    15 => "00101110000000000001111111110111000000000111111111100111111111111111111111101011111111110101", 
    16 => "11011100111111101100000000001100111111101111111111111100000000001010111111100110000000001100", 
    17 => "00000100111111111010000000000010000000011010111111101111111111100110000000001101111111101100", 
    18 => "00000001111111111101000000001000000000000000000000011001111111110001000000101100000000001010", 
    19 => "00001100000000000001000000001010111111101101111111101100111111110111111111110110111111111110", 
    20 => "11101100111111110111000000010010000000000110000000010010111111111110000000100010111111111111", 
    21 => "00111000111111111110000000000111000000010011000000001000000000010010111111101011000000001011", 
    22 => "00000010111111111001000000000100111111111101111111101100000000000001000000010000111111101110", 
    23 => "00001100000000000011000000101000111111110111111111101100000000001011111111111111000000011000", 
    24 => "00001100111111110011000000000000000000001101111111110010111111110000000000001001111111101100", 
    25 => "11110100000000000000111111111101111111101100111111110101111111110000111111111010111111110010", 
    26 => "00000011111111101010000000011000000000000100000000000110000000001000111111111000111111111110", 
    27 => "11111011000000000111111111111000000000000011111111111011111111111110000000011000111111110111", 
    28 => "11111111000000000000111111101000111111111001111111110001111111111000000000100000000000000111", 
    29 => "00000110111111111110000000000011111111111110111111111011000000001010000000001010000000011100", 
    30 => "11111100000000000001000000000111111111111101000000001010111111110110000000000001111110111100", 
    31 => "00000001000000001010000000000001111111110110111111111100000000000111111111111101000000001101", 
    32 => "00011010000000001110000000001001111111100111000000100011000000001011000000011000111111111000", 
    33 => "00001111111111110101111111111101111111110000111111111101000000010100000000000100111111111100", 
    34 => "00001010111111111110000000000110000000001101000000011100000000000110000000010100000000000011", 
    35 => "11111011000000011000000000010000000000000001000000000110000000010011111111110111111111100101", 
    36 => "00010010000000001000000000001100000000000001111111110110111111111001111111101010000000000110", 
    37 => "00000001111111111001000000000110000000001011000000010100111111110101000000000010000000000010", 
    38 => "00001011000000001101111111111101000000001010111111110111000000100010111111111001000000001001", 
    39 => "00001100000000001001111111101110111111111110111111011100111111110010000000000001000000010100", 
    40 => "00000010111111111110000000000001111111110101111111101011111111101100000000011111000000001011", 
    41 => "00001101000000001100000000011110111111111110000000000100111111100101111111110110000000001001", 
    42 => "11111000111111100000111111001100000000000000111111111100000000000010111111101011000000000101", 
    43 => "00000111000000001000111111110000111111110100111111101011000000001011000000000001111111111010", 
    44 => "00000101111111100001111111101100111111111111111111111001000000000011000000001000111111111111", 
    45 => "11110000000000001010111111110000000000000011000000001111111111100000111111101000111111111001", 
    46 => "11101111000000001000000000000001111111010101000000001111111111111010000000000111000000000011", 
    47 => "11110010000000001000111111110001000000000010111111100110111111101011000000010010111111000100", 
    48 => "00001000000000010001000000000011111111100110111111110010000000001011000000000111111111110011", 
    49 => "11101010000000001100111111111011000000010001000000000110111111110011111111101000111111101011", 
    50 => "00010011111111111111000000000111111111111000000000000001111111111110111111110111111111111110", 
    51 => "00000110000000100011111111110110000000000101111111101010111111111110000000011110111111111111", 
    52 => "00000101111111111011111111111011111111010000000000110010000000000101000000000110111111111100", 
    53 => "00010000111111110001111111111010111111111100111111101100000000001010111111100010111111011110", 
    54 => "11100000000000001001000000001001111111101111111111111001000000010111111111110011000000000010", 
    55 => "00010110111111011111111111111111000000000000111111111001000000011001000000001000000000001010", 
    56 => "11011101000000000101111111111111111111110010111111111001111111111111000000001010111111110101", 
    57 => "11101101111111011011111111110111000000000000000000001000000000001100111111101110111110111010", 
    58 => "00000011000000000001111111110110000000000111000000000011111111011101111111101011111111101110", 
    59 => "11110101111111110000111111010010111111110101111111111011000000000100000000000001000000000100", 
    60 => "11111110111111110000000000001010111111110000111111100011000000010100000000010110111111111000", 
    61 => "00001100111111110101111111101111111111110110111111111010000000110001111111111100111111110110", 
    62 => "10110111000000000011000000000001000000000001111111111110111111111010000000000110000000000010", 
    63 => "00001000111111110011111111111010000000110111111111011111000000001011111111110000111111111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi is
    generic (
        DataWidth : INTEGER := 92;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi is
    component dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi_rom_U :  component dense_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w1fYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


