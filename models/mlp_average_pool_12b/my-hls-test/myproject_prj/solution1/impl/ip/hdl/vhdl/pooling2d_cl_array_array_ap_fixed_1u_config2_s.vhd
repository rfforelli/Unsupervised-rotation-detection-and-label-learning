-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_array_ap_fixed_1u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_V_full_n : IN STD_LOGIC;
    res_V_data_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_array_ap_fixed_1u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3840 : STD_LOGIC_VECTOR (13 downto 0) := "11100001000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln233_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln185_2_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_119 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln233_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln233_reg_680_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln233_fu_170_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln185_2_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_2_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_2_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_5_fu_460_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_5_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_13_fu_502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_13_reg_708 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln203_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln213_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call18 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call18 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call18 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp27 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg : STD_LOGIC := '0';
    signal add_ln216_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln218_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln211_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln185_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_1_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_2_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_3_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_1_fu_436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_4_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3_fu_448_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_8_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_7_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_11_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_10_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_12_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_9_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln218_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_6_fu_596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_fu_600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1148_fu_605_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1148_fu_617_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_623_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1148_2_fu_637_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1148_1_fu_633_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1148_1_fu_647_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_1_fu_651_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1148_fu_657_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_pack_data_V_fu_661_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_143 : BOOLEAN;
    signal ap_condition_220 : BOOLEAN;
    signal ap_condition_814 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141 : component shift_line_buffer_array_ap_fixed_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ready,
        in_elem_data_V_read => tmp_data_0_V_reg_689,
        kernel_window_1_V_read => kernel_data_V_1,
        kernel_window_2_V_read => kernel_data_V_2,
        kernel_window_3_V_read => kernel_data_V_3,
        kernel_window_5_V_read => kernel_data_V_5,
        kernel_window_6_V_read => kernel_data_V_6,
        kernel_window_7_V_read => kernel_data_V_7,
        kernel_window_9_V_read => kernel_data_V_9,
        kernel_window_10_V_read => kernel_data_V_10,
        kernel_window_11_V_read => kernel_data_V_11,
        kernel_window_13_V_read => kernel_data_V_13,
        kernel_window_14_V_read => kernel_data_V_14,
        kernel_window_15_V_read => kernel_data_V_15,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_8,
        ap_return_9 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_9,
        ap_return_10 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_10,
        ap_return_11 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_11,
        ap_return_12 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_12,
        ap_return_13 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_13,
        ap_return_14 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_14,
        ap_return_15 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_15,
        ap_ce => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln233_reg_680 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ready = ap_const_logic_1)) then 
                    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_220)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_143)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130 <= select_ln213_fu_582_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_130;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_119 <= add_ln233_fu_170_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_119 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln203_fu_508_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln203_fu_508_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln216_fu_514_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_814)) then
                if ((icmp_ln207_fu_558_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln207_fu_558_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln211_fu_564_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln203_fu_508_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln203_fu_508_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln218_fu_532_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln185_2_fu_424_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_13_reg_708 <= add_ln703_13_fu_502_p2;
                add_ln703_2_reg_698 <= add_ln703_2_fu_442_p2;
                add_ln703_5_reg_703 <= add_ln703_5_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_680_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln185_2_reg_694 <= and_ln185_2_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_130 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_storemerge_i_i_reg_130 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln203_reg_713 <= icmp_ln203_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln233_reg_680 <= icmp_ln233_fu_164_p2;
                icmp_ln233_reg_680_pp0_iter1_reg <= icmp_ln233_reg_680;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_680_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_data_V_1 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_4;
                kernel_data_V_10 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_11;
                kernel_data_V_11 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_12;
                kernel_data_V_13 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_13;
                kernel_data_V_14 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_14;
                kernel_data_V_15 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_15;
                kernel_data_V_2 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_5;
                kernel_data_V_3 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_6;
                kernel_data_V_5 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_7;
                kernel_data_V_6 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_8;
                kernel_data_V_7 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_9;
                kernel_data_V_9 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_reg_713 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sY <= ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_680 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_0_V_reg_689 <= data_V_data_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln233_fu_164_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln233_fu_164_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln233_fu_164_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln211_fu_564_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln213_fu_576_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln216_fu_514_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln218_fu_526_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln233_fu_170_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_119) + unsigned(ap_const_lv14_1));
    add_ln703_10_fu_484_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_4) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_0));
    add_ln703_11_fu_490_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_6) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_5));
    add_ln703_12_fu_496_p2 <= std_logic_vector(unsigned(add_ln703_11_fu_490_p2) + unsigned(add_ln703_10_fu_484_p2));
    add_ln703_13_fu_502_p2 <= std_logic_vector(unsigned(add_ln703_12_fu_496_p2) + unsigned(add_ln703_9_fu_478_p2));
    add_ln703_1_fu_436_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_10) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_2));
    add_ln703_2_fu_442_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_436_p2) + unsigned(add_ln703_fu_430_p2));
    add_ln703_3_fu_448_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_14) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_15));
    add_ln703_4_fu_454_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_13) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_3));
    add_ln703_5_fu_460_p2 <= std_logic_vector(unsigned(add_ln703_4_fu_454_p2) + unsigned(add_ln703_3_fu_448_p2));
    add_ln703_6_fu_596_p2 <= std_logic_vector(unsigned(add_ln703_5_reg_703) + unsigned(add_ln703_2_reg_698));
    add_ln703_7_fu_466_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_8) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_9));
    add_ln703_8_fu_472_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_7) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_1));
    add_ln703_9_fu_478_p2 <= std_logic_vector(unsigned(add_ln703_8_fu_472_p2) + unsigned(add_ln703_7_fu_466_p2));
    add_ln703_fu_430_p2 <= std_logic_vector(unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_11) + unsigned(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_return_12));
    and_ln185_1_fu_418_p2 <= (icmp_ln185_3_fu_406_p2 and icmp_ln185_2_fu_396_p2);
    and_ln185_2_fu_424_p2 <= (and_ln185_fu_412_p2 and and_ln185_1_fu_418_p2);
    and_ln185_fu_412_p2 <= (icmp_ln185_fu_376_p2 and icmp_ln185_1_fu_386_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln233_reg_680, ap_enable_reg_pp0_iter3, and_ln185_2_reg_694)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln233_reg_680, ap_enable_reg_pp0_iter3, and_ln185_2_reg_694)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp27_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln233_reg_680, ap_enable_reg_pp0_iter3, and_ln185_2_reg_694)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp27 <= (((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln233_reg_680, ap_enable_reg_pp0_iter3, and_ln185_2_reg_694)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_V_data_V_empty_n, icmp_ln233_reg_680)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call18_assign_proc : process(data_V_data_V_empty_n, icmp_ln233_reg_680)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call18 <= ((icmp_ln233_reg_680 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(res_V_data_V_full_n, and_ln185_2_reg_694)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter3_ignore_call18_assign_proc : process(res_V_data_V_full_n, and_ln185_2_reg_694)
    begin
                ap_block_state5_pp0_stage0_iter3_ignore_call18 <= ((ap_const_lv1_1 = and_ln185_2_reg_694) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_143_assign_proc : process(icmp_ln233_reg_680_pp0_iter1_reg, icmp_ln203_fu_508_p2, icmp_ln207_fu_558_p2)
    begin
                ap_condition_143 <= ((icmp_ln203_fu_508_p2 = ap_const_lv1_1) and (icmp_ln207_fu_558_p2 = ap_const_lv1_0) and (icmp_ln233_reg_680_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_220_assign_proc : process(icmp_ln233_reg_680_pp0_iter1_reg, icmp_ln203_fu_508_p2, icmp_ln207_fu_558_p2)
    begin
                ap_condition_220 <= ((icmp_ln207_fu_558_p2 = ap_const_lv1_1) and (icmp_ln203_fu_508_p2 = ap_const_lv1_1) and (icmp_ln233_reg_680_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_814_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln233_reg_680_pp0_iter1_reg, icmp_ln203_fu_508_p2, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_814 <= ((icmp_ln203_fu_508_p2 = ap_const_lv1_1) and (icmp_ln233_reg_680_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln233_fu_164_p2)
    begin
        if ((icmp_ln233_fu_164_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_130 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln203_reg_713, ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130)
    begin
        if (((icmp_ln203_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter3_storemerge_i_i_reg_130;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp27) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ce <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_141_ap_start_reg;

    data_V_data_V_blk_n_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln233_reg_680)
    begin
        if (((icmp_ln233_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln233_reg_680, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln233_reg_680 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln185_1_fu_386_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_3) else "0";
    icmp_ln185_2_fu_396_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_2)) else "0";
    icmp_ln185_3_fu_406_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_2)) else "0";
    icmp_ln185_fu_376_p2 <= "1" when (sX = ap_const_lv32_3) else "0";
    icmp_ln203_fu_508_p2 <= "1" when (pX = ap_const_lv32_77) else "0";
    icmp_ln207_fu_558_p2 <= "1" when (pY = ap_const_lv32_77) else "0";
    icmp_ln233_fu_164_p2 <= "1" when (indvar_flatten_reg_119 = ap_const_lv14_3840) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_V_blk_n_assign_proc : process(res_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln185_2_reg_694)
    begin
        if (((ap_const_lv1_1 = and_ln185_2_reg_694) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_V_blk_n <= res_V_data_V_full_n;
        else 
            res_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(res_pack_data_V_fu_661_p3),16));


    res_V_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln185_2_reg_694, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln185_2_reg_694) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_V_write <= ap_const_logic_1;
        else 
            res_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    res_pack_data_V_fu_661_p3 <= 
        sub_ln1148_1_fu_651_p2 when (tmp_1_fu_609_p3(0) = '1') else 
        zext_ln1148_fu_657_p1;
    select_ln213_fu_582_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_1_fu_386_p2(0) = '1') else 
        add_ln213_fu_576_p2;
    select_ln218_fu_532_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_fu_376_p2(0) = '1') else 
        add_ln218_fu_526_p2;
        sext_ln1148_1_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_2_fu_637_p4),13));

        sext_ln1148_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_fu_600_p2),17));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1148_1_fu_651_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln1148_1_fu_633_p1));
    sub_ln1148_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1148_fu_605_p1));
    sum_V_fu_600_p2 <= std_logic_vector(unsigned(add_ln703_13_reg_708) + unsigned(add_ln703_6_fu_596_p2));
    tmp_1_fu_609_p3 <= sum_V_fu_600_p2(15 downto 15);
    tmp_fu_623_p4 <= sub_ln1148_fu_617_p2(16 downto 4);
    trunc_ln1148_2_fu_637_p4 <= sum_V_fu_600_p2(15 downto 4);
    zext_ln1148_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_623_p4),14));
    zext_ln1148_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1148_1_fu_647_p1),14));
end behav;
