// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_array_array_ap_fixed_16u_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state16;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [15:0] tmp_data_V_1_reg_794;
wire    io_acc_block_signal_op17;
reg    ap_block_state1;
reg   [15:0] tmp_data_V_2_reg_799;
reg   [15:0] tmp_data_V_3_reg_804;
reg   [15:0] tmp_data_V_4_reg_809;
reg   [15:0] tmp_data_V_5_reg_814;
reg   [15:0] tmp_data_V_6_reg_819;
reg   [15:0] tmp_data_V_722_reg_824;
reg   [15:0] tmp_data_V_8_reg_829;
reg   [15:0] tmp_data_V_9_reg_834;
reg   [15:0] tmp_data_V_10_reg_839;
reg   [15:0] tmp_data_V_11_reg_844;
reg   [15:0] tmp_data_V_12_reg_849;
reg   [15:0] tmp_data_V_13_reg_854;
reg   [15:0] tmp_data_V_14_reg_859;
reg   [15:0] tmp_data_V_15_reg_864;
reg   [14:0] trunc_ln_reg_869;
reg   [14:0] trunc_ln708_s_reg_874;
wire    ap_CS_fsm_state2;
reg   [13:0] trunc_ln708_92_reg_879;
wire    ap_CS_fsm_state3;
reg   [14:0] trunc_ln708_93_reg_884;
wire    ap_CS_fsm_state4;
reg   [14:0] trunc_ln708_94_reg_889;
wire    ap_CS_fsm_state5;
reg   [13:0] trunc_ln708_95_reg_894;
wire    ap_CS_fsm_state6;
reg   [13:0] trunc_ln708_96_reg_899;
wire    ap_CS_fsm_state7;
reg   [14:0] trunc_ln708_97_reg_904;
wire    ap_CS_fsm_state8;
reg   [14:0] trunc_ln708_98_reg_909;
wire    ap_CS_fsm_state9;
reg   [14:0] trunc_ln708_99_reg_914;
wire    ap_CS_fsm_state10;
reg   [14:0] trunc_ln708_100_reg_919;
wire    ap_CS_fsm_state11;
reg   [15:0] tmp_data_11_V_reg_924;
wire    ap_CS_fsm_state12;
reg   [15:0] tmp_data_12_V_reg_929;
wire    ap_CS_fsm_state13;
reg   [14:0] trunc_ln708_101_reg_934;
wire    ap_CS_fsm_state14;
reg   [13:0] trunc_ln708_102_reg_939;
wire    ap_CS_fsm_state15;
wire    io_acc_block_signal_op148;
reg  signed [15:0] grp_fu_264_p0;
wire  signed [24:0] sext_ln1192_fu_416_p1;
wire  signed [24:0] sext_ln1192_89_fu_437_p1;
wire  signed [23:0] sext_ln1192_90_fu_457_p1;
wire  signed [24:0] sext_ln1192_91_fu_477_p1;
wire  signed [24:0] sext_ln1192_92_fu_497_p1;
wire  signed [23:0] sext_ln1192_93_fu_517_p1;
wire  signed [23:0] sext_ln1192_94_fu_537_p1;
wire  signed [24:0] sext_ln1192_95_fu_557_p1;
wire  signed [24:0] sext_ln1192_96_fu_577_p1;
wire  signed [24:0] sext_ln1192_97_fu_597_p1;
wire  signed [24:0] sext_ln1192_98_fu_617_p1;
wire  signed [25:0] sext_ln1192_82_fu_637_p1;
wire  signed [25:0] sext_ln1192_83_fu_657_p1;
wire  signed [24:0] sext_ln1192_99_fu_677_p1;
wire  signed [23:0] sext_ln1192_100_fu_697_p1;
wire  signed [24:0] sext_ln1192_101_fu_769_p1;
reg   [10:0] grp_fu_264_p1;
wire   [24:0] add_ln1192_fu_421_p0;
wire   [25:0] grp_fu_264_p2;
wire   [24:0] add_ln1192_fu_421_p2;
wire   [24:0] add_ln1192_95_fu_441_p0;
wire   [24:0] add_ln1192_95_fu_441_p2;
wire   [23:0] add_ln1192_96_fu_461_p0;
wire   [23:0] add_ln1192_96_fu_461_p2;
wire   [24:0] add_ln1192_97_fu_481_p0;
wire   [24:0] add_ln1192_97_fu_481_p2;
wire   [24:0] add_ln1192_98_fu_501_p0;
wire   [24:0] add_ln1192_98_fu_501_p2;
wire   [23:0] add_ln1192_99_fu_521_p0;
wire   [23:0] add_ln1192_99_fu_521_p2;
wire   [23:0] add_ln1192_100_fu_541_p0;
wire   [23:0] add_ln1192_100_fu_541_p2;
wire   [24:0] add_ln1192_101_fu_561_p0;
wire   [24:0] add_ln1192_101_fu_561_p2;
wire   [24:0] add_ln1192_102_fu_581_p0;
wire   [24:0] add_ln1192_102_fu_581_p2;
wire   [24:0] add_ln1192_103_fu_601_p0;
wire   [24:0] add_ln1192_103_fu_601_p2;
wire   [24:0] add_ln1192_104_fu_621_p0;
wire   [24:0] add_ln1192_104_fu_621_p2;
wire   [25:0] add_ln1192_105_fu_641_p2;
wire   [25:0] add_ln1192_106_fu_661_p2;
wire   [24:0] add_ln1192_107_fu_681_p0;
wire   [24:0] add_ln1192_107_fu_681_p2;
wire   [23:0] add_ln1192_108_fu_701_p0;
wire   [23:0] add_ln1192_108_fu_701_p2;
wire   [24:0] add_ln1192_109_fu_773_p0;
wire   [24:0] add_ln1192_109_fu_773_p2;
wire   [14:0] trunc_ln708_103_fu_779_p4;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_data_11_V_reg_924 <= {{add_ln1192_105_fu_641_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_data_12_V_reg_929 <= {{add_ln1192_106_fu_661_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_V_10_reg_839 <= data_V_data_10_V_dout;
        tmp_data_V_11_reg_844 <= data_V_data_11_V_dout;
        tmp_data_V_12_reg_849 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_854 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_859 <= data_V_data_14_V_dout;
        tmp_data_V_15_reg_864 <= data_V_data_15_V_dout;
        tmp_data_V_1_reg_794 <= data_V_data_1_V_dout;
        tmp_data_V_2_reg_799 <= data_V_data_2_V_dout;
        tmp_data_V_3_reg_804 <= data_V_data_3_V_dout;
        tmp_data_V_4_reg_809 <= data_V_data_4_V_dout;
        tmp_data_V_5_reg_814 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_819 <= data_V_data_6_V_dout;
        tmp_data_V_722_reg_824 <= data_V_data_7_V_dout;
        tmp_data_V_8_reg_829 <= data_V_data_8_V_dout;
        tmp_data_V_9_reg_834 <= data_V_data_9_V_dout;
        trunc_ln_reg_869 <= {{add_ln1192_fu_421_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln708_100_reg_919 <= {{add_ln1192_104_fu_621_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        trunc_ln708_101_reg_934 <= {{add_ln1192_107_fu_681_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln708_102_reg_939 <= {{add_ln1192_108_fu_701_p2[23:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln708_92_reg_879 <= {{add_ln1192_96_fu_461_p2[23:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln708_93_reg_884 <= {{add_ln1192_97_fu_481_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln708_94_reg_889 <= {{add_ln1192_98_fu_501_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln708_95_reg_894 <= {{add_ln1192_99_fu_521_p2[23:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln708_96_reg_899 <= {{add_ln1192_100_fu_541_p2[23:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln708_97_reg_904 <= {{add_ln1192_101_fu_561_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln708_98_reg_909 <= {{add_ln1192_102_fu_581_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln708_99_reg_914 <= {{add_ln1192_103_fu_601_p2[24:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln708_s_reg_874 <= {{add_ln1192_95_fu_441_p2[24:10]}};
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_264_p0 = sext_ln1192_101_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_264_p0 = sext_ln1192_100_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_264_p0 = sext_ln1192_99_fu_677_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_264_p0 = sext_ln1192_83_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_264_p0 = sext_ln1192_82_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_264_p0 = sext_ln1192_98_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_264_p0 = sext_ln1192_97_fu_597_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_264_p0 = sext_ln1192_96_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_264_p0 = sext_ln1192_95_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_264_p0 = sext_ln1192_94_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_264_p0 = sext_ln1192_93_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_264_p0 = sext_ln1192_92_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_264_p0 = sext_ln1192_91_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_264_p0 = sext_ln1192_90_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_264_p0 = sext_ln1192_89_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_264_p0 = sext_ln1192_fu_416_p1;
    end else begin
        grp_fu_264_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_264_p1 = 25'd300;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_264_p1 = 24'd230;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_264_p1 = 25'd451;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_264_p1 = 26'd647;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_264_p1 = 26'd545;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_264_p1 = 25'd274;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_264_p1 = 25'd472;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_264_p1 = 25'd313;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_264_p1 = 25'd262;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_264_p1 = 24'd223;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_264_p1 = 24'd156;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_264_p1 = 25'd346;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_264_p1 = 25'd401;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_264_p1 = 24'd203;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_264_p1 = 25'd318;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_264_p1 = 25'd436;
    end else begin
        grp_fu_264_p1 = 'bx;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((io_acc_block_signal_op148 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_100_fu_541_p0 = grp_fu_264_p2;

assign add_ln1192_100_fu_541_p2 = (add_ln1192_100_fu_541_p0 + 24'd169984);

assign add_ln1192_101_fu_561_p0 = grp_fu_264_p2;

assign add_ln1192_101_fu_561_p2 = (add_ln1192_101_fu_561_p0 + 25'd571392);

assign add_ln1192_102_fu_581_p0 = grp_fu_264_p2;

assign add_ln1192_102_fu_581_p2 = (add_ln1192_102_fu_581_p0 + 25'd229376);

assign add_ln1192_103_fu_601_p0 = grp_fu_264_p2;

assign add_ln1192_103_fu_601_p2 = ($signed(add_ln1192_103_fu_601_p0) + $signed(25'd33448960));

assign add_ln1192_104_fu_621_p0 = grp_fu_264_p2;

assign add_ln1192_104_fu_621_p2 = ($signed(add_ln1192_104_fu_621_p0) + $signed(25'd33391616));

assign add_ln1192_105_fu_641_p2 = (grp_fu_264_p2 + 26'd584704);

assign add_ln1192_106_fu_661_p2 = ($signed(grp_fu_264_p2) + $signed(26'd66929664));

assign add_ln1192_107_fu_681_p0 = grp_fu_264_p2;

assign add_ln1192_107_fu_681_p2 = ($signed(add_ln1192_107_fu_681_p0) + $signed(25'd33136640));

assign add_ln1192_108_fu_701_p0 = grp_fu_264_p2;

assign add_ln1192_108_fu_701_p2 = (add_ln1192_108_fu_701_p0 + 24'd163840);

assign add_ln1192_109_fu_773_p0 = grp_fu_264_p2;

assign add_ln1192_109_fu_773_p2 = (add_ln1192_109_fu_773_p0 + 25'd25600);

assign add_ln1192_95_fu_441_p0 = grp_fu_264_p2;

assign add_ln1192_95_fu_441_p2 = (add_ln1192_95_fu_441_p0 + 25'd261120);

assign add_ln1192_96_fu_461_p0 = grp_fu_264_p2;

assign add_ln1192_96_fu_461_p2 = (add_ln1192_96_fu_461_p0 + 24'd172032);

assign add_ln1192_97_fu_481_p0 = grp_fu_264_p2;

assign add_ln1192_97_fu_481_p2 = (add_ln1192_97_fu_481_p0 + 25'd291840);

assign add_ln1192_98_fu_501_p0 = grp_fu_264_p2;

assign add_ln1192_98_fu_501_p2 = (add_ln1192_98_fu_501_p0 + 25'd223232);

assign add_ln1192_99_fu_521_p0 = grp_fu_264_p2;

assign add_ln1192_99_fu_521_p2 = (add_ln1192_99_fu_521_p0 + 24'd124928);

assign add_ln1192_fu_421_p0 = grp_fu_264_p2;

assign add_ln1192_fu_421_p2 = ($signed(add_ln1192_fu_421_p0) + $signed(25'd32537600));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (io_acc_block_signal_op17 == 1'b0) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_264_p2 = ($signed(grp_fu_264_p0) * $signed({{1'b0}, {grp_fu_264_p1}}));

assign io_acc_block_signal_op148 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op17 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = $signed(trunc_ln_reg_869);

assign res_V_data_10_V_din = $signed(trunc_ln708_100_reg_919);

assign res_V_data_11_V_din = tmp_data_11_V_reg_924;

assign res_V_data_12_V_din = tmp_data_12_V_reg_929;

assign res_V_data_13_V_din = $signed(trunc_ln708_101_reg_934);

assign res_V_data_14_V_din = $signed(trunc_ln708_102_reg_939);

assign res_V_data_15_V_din = $signed(trunc_ln708_103_fu_779_p4);

assign res_V_data_1_V_din = $signed(trunc_ln708_s_reg_874);

assign res_V_data_2_V_din = $signed(trunc_ln708_92_reg_879);

assign res_V_data_3_V_din = $signed(trunc_ln708_93_reg_884);

assign res_V_data_4_V_din = $signed(trunc_ln708_94_reg_889);

assign res_V_data_5_V_din = $signed(trunc_ln708_95_reg_894);

assign res_V_data_6_V_din = $signed(trunc_ln708_96_reg_899);

assign res_V_data_7_V_din = $signed(trunc_ln708_97_reg_904);

assign res_V_data_8_V_din = $signed(trunc_ln708_98_reg_909);

assign res_V_data_9_V_din = $signed(trunc_ln708_99_reg_914);

assign sext_ln1192_100_fu_697_p1 = $signed(tmp_data_V_14_reg_859);

assign sext_ln1192_101_fu_769_p1 = $signed(tmp_data_V_15_reg_864);

assign sext_ln1192_82_fu_637_p1 = $signed(tmp_data_V_11_reg_844);

assign sext_ln1192_83_fu_657_p1 = $signed(tmp_data_V_12_reg_849);

assign sext_ln1192_89_fu_437_p1 = $signed(tmp_data_V_1_reg_794);

assign sext_ln1192_90_fu_457_p1 = $signed(tmp_data_V_2_reg_799);

assign sext_ln1192_91_fu_477_p1 = $signed(tmp_data_V_3_reg_804);

assign sext_ln1192_92_fu_497_p1 = $signed(tmp_data_V_4_reg_809);

assign sext_ln1192_93_fu_517_p1 = $signed(tmp_data_V_5_reg_814);

assign sext_ln1192_94_fu_537_p1 = $signed(tmp_data_V_6_reg_819);

assign sext_ln1192_95_fu_557_p1 = $signed(tmp_data_V_722_reg_824);

assign sext_ln1192_96_fu_577_p1 = $signed(tmp_data_V_8_reg_829);

assign sext_ln1192_97_fu_597_p1 = $signed(tmp_data_V_9_reg_834);

assign sext_ln1192_98_fu_617_p1 = $signed(tmp_data_V_10_reg_839);

assign sext_ln1192_99_fu_677_p1 = $signed(tmp_data_V_13_reg_854);

assign sext_ln1192_fu_416_p1 = $signed(data_V_data_0_V_dout);

assign start_out = real_start;

assign trunc_ln708_103_fu_779_p4 = {{add_ln1192_109_fu_773_p2[24:10]}};

endmodule //normalize_array_array_ap_fixed_16u_config14_s
